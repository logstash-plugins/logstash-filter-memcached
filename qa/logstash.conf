# To setup:
# 
# For TCP memcached on 127.0.0.1:11211
#
# memcached -d -l 127.0.0.1
# for i in `seq 1 10`
# do
#   echo -en 'set perf:10.0.0.'$i' 0 10000 100\r\n1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\r\n' | nc 127.0.0.1 11211
# done
#
# Or for UNIX domain socket on /tmp/memcached.sock
#
# for i in `seq 1 10`
# do
#   echo -en 'set perf:10.0.0.'$i' 0 10000 100\r\n1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\r\n' | socat - /tmp/memcached.sock
# done

input {
  generator {
    lines => [
      "10.0.0.1",
      "10.0.0.2",
      "10.0.0.3",
      "10.0.0.4",
      "10.0.0.5",
      "10.0.0.6",
      "10.0.0.7",
      "10.0.0.8",
      "10.0.0.9",
      "10.0.0.10"
    ]
  }
}

filter {
  memcached {
    hosts => ["127.0.0.1:11211"]
    #hosts => ["/tmp/memcached.sock"]
    namespace => "perf"
    id => "memcached-get"
    get => {
      "%{message}" => "ipinfo"
    }
    lru_cache_ttl => 60
    lru_cache_max_entries => 1000
  }

  metrics {
    meter => "events"
    add_tag => "metric"
  }

  if "metric" not in [tags] {
    drop {}
  }

  drop {}
}

output {
  if "metric" in [tags] {
    stdout {
      codec => line {
        format => "rate: %{[events][rate_1m]}"
      }
    }
  }
}

# In another window...
#
# curl -s 127.0.0.1:9602/_node/stats/pipelines/main | jq '.pipelines.main.plugins.filters[] | select(.id == "memcached-get") | (.events.duration_in_millis / .events.out)'
#
# Okay....
#
#
# tcp 127.0.0.1:11211: 0.7565465838509317
# 
